defmodule StarkBank.CorporateBalance do
  alias __MODULE__, as: CorporateBalance
  alias StarkBank.Utils.Rest
  alias StarkBank.Utils.Check
  alias StarkBank.User.Project
  alias StarkBank.User.Organization
  alias StarkBank.Error

  @moduledoc """
  Groups CorporateBalance related functions
  """

  @spec __struct__ :: StarkBank.CorporateBalance.t()
  @doc """
  The CorporateBalance struct displays the current balance of the workspace,
  which is the result of the sum of all transactions within this
  workspace. The balance is never generated by the user, but it
  can be retrieved to see the information available.

  ## Attributes (return-only):
    - `:id` [string]: unique id returned when CorporateBalance is created. ex: "5656565656565656"
    - `:amount` [integer]: current balance amount of the workspace in cents. ex: 200 (= R$ 2.00)
    - `:limit` [integer]: The maximum negative balance allowed by the user. ex: 10000 (= R$ 100.00)
    - `:max_limit` [integer]: The maximum negative balance allowed by StarkBank. ex: 100000 (= R$ 1000.00)
    - `:currency` [string]: currency of the current Workspace. Expect others to be added eventually. ex: "BRL"
    - `:updated` [DateTime]: update datetime for the balance. ex: ~U[2020-03-26 19:32:35.418698Z]
  """
  defstruct [
    :id,
    :amount,
    :limit,
    :max_limit,
    :currency,
    :updated
  ]

  @type t() :: %__MODULE__{}

  @doc """
  Receive the CorporateBalance entity linked to your workspace in the Stark Bank API

  ## Parameters (optional):
    - `:user` [Organization/Project, default nil]: Organization or Project struct returned from StarkBank.project(). Only necessary if default project or organization has not been set in configs.

  ## Return:
    - CorporateBalance struct with updated attributes
  """
  @spec get(user: Project.t() | Organization.t() | nil) :: {:ok, CorporateBalance.t()} | {:error, [Error]}
  def get(options \\ []) do
    case Rest.get_list(resource(), options) |> Enum.take(1) do
      [{:ok, balance}] -> {:ok, balance}
      [{:error, error}] -> {:error, error}
    end
  end

  @doc """
  Same as get(), but it will unwrap the error tuple and raise in case of errors.
  """
  @spec get!(user: Project.t() | Organization.t() | nil) :: CorporateBalance.t()
  def get!(options \\ []) do
    Rest.get_list!(resource(), options) |> Enum.take(1) |> hd()
  end

  @doc false
  def resource() do
    {
      "CorporateBalance",
      &resource_maker/1
    }
  end

  @doc false
  def resource_maker(json) do
    %CorporateBalance{
      id: json[:id],
      amount: json[:amount],
      limit: json[:limit],
      max_limit: json[:max_limit],
      currency: json[:currency],
      updated: json[:updated] |> Check.datetime()
    }
  end
end
